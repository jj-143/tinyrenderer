{"version":3,"sources":["../src/utils/vecOps.js","../src/utils/utils.js","../src/utils/drawer.js","../src/utils/PerspectiveCamera.js","../src/index.js","../src/utils/shaders.js","../node_modules/tga-js/dist/esm/tga.js","../src/utils/Loader.js","index.js"],"names":["cross","v1","v2","subtract","dot","abs","v","Math","sqrt","normalize","length","map","i","iNormalize3","len","neg","removedRowCol","m","row","col","Array","keys","slice","determinant","reduce","acc","val","j","determinant3","adj","_","vecdiv","scalar","x","inverse","det","inverse3","columnVector","a","transpose","n","undefined","matmulvec","matmulvec4aug","aug","matmul4","b","result","k","matmul","out","Error","o","from","identity_4","mToV","barycentric","v0","y","u","calcModelViewMatrix","cameraPosition","cameraUp","center","z","basisMatrix","translate","calcPerspectiveMatrix","c","calcViewportMatrix","width","height","d","triangleWithZBuffer","shader","zBuffer","data","viewportTr","bbmin","max","parseInt","min","bbmax","bc","bufferIdx","color","fragment","PerspectiveCamera","position","lookAt","up","viewport","vW","vH","perspective","modelView","uniM","TinyRenderer","target","canvas","domElement","document","createElement","ctx","getContext","Uint8ClampedArray","scene","camera","clearRect","imgData","getImageData","fill","Infinity","model","light","updateUniform","lightDir","dir","renderingTime","Date","coords","fi","faces","vi","vertex","console","log","putImageData","Shader","uniform","uniMIT","lightDirTrx","GouraudShader","varyingIntensity","vertexNumber","vertices","vertexNormal","vns","coord","intensity","ShaderWithTexture","diffuse","diffuseW","header","diffuseH","varyingVertexTextureUV","vertexTextureNumber","vt","vts","imageData","TextureAndNormalMap","normal","normalData","DiffuseNormalSpecular","specular","diff","dotted","reflection","specData","value","DiffuseTangentNormalSpecular","vertexNormals","varyingCoord","vn","intN","tangentNormal","e1","e2","invE","t1","t2","TBN","FastDiffuseTangentNormalSpecular","iE","tNorm","bNorm","e","t","r","s","h","g","l","_checkHeader","imageType","hasColorMap","colorMapLength","colorMapDepth","colorMapType","pixelDepth","_decodeRLE","Uint8Array","set","_getImageData8bits","p","_getImageData16bits","_getImageData24bits","_getImageData32bits","_getImageDataGrey8bits","_getImageDataGrey16bits","open","XMLHttpRequest","responseType","onload","status","load","response","send","idLength","colorMapIndex","offsetX","offsetY","flags","hasEncoding","isGreyColor","palette","subarray","f","D","createImageData","call","getCanvas","getDataURL","toDataURL","Loader","items","Map","Promise","all","values","then","forEach","key","idx","src","loadModel","loadTGA","resolve","tgaLoader","TGALoader","fetch","text","split","lines","line","type","push","filter","splice","Number","match","matches","matchAll","face","loader","addModel","addTexture","tangentNM","renderer","getElementById","setSize","animate","deg","PI","render","cos","sin","update","requestAnimationFrame"],"mappings":"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","file":"demo.39364594.js","sourceRoot":"../demo","sourcesContent":["export const cross = (v1, v2) => [\n  v1[1] * v2[2] - v1[2] * v2[1],\n  -v1[0] * v2[2] + v1[2] * v2[0],\n  v1[0] * v2[1] - v1[1] * v2[0],\n]\n\nexport const subtract = (v1, v2) => [v1[0] - v2[0], v1[1] - v2[1], v1[2] - v2[2]]\n\nexport const dot = (v1, v2) => v1[0] * v2[0] + v1[1] * v2[1] + v1[2] * v2[2]\nexport const abs = v => Math.sqrt(v[0] ** 2 + v[1] ** 2 + v[2] ** 2)\nexport const normalize = v => {\n  let length = abs(v)\n  return v.map(i => i / length)\n}\n\n/**\n * normalize **inplace**\n */\nexport const iNormalize3 = v => {\n  let len = Math.sqrt(v[0] ** 2 + v[1] ** 2 + v[2] ** 2)\n  v[0] /= len\n  v[1] /= len\n  v[2] /= len\n  return v\n}\n\nexport const neg = v => v.map(i => -i)\n\n/**\n * @param {Square Matirx} m\n * @returns {Square Matirx} 1 less dimension of m\n */\nconst removedRowCol = (m, row, col) => {\n  return [...Array(m.length - 1).keys()].map(i => {\n    i = i < row ? i : i + 1\n    return [...m[i].slice(0, col), ...m[i].slice(col + 1)]\n  })\n}\n\n/**\n * @param {Square Matrix} m\n */\nexport const determinant = m => {\n  if (m.length == 2) return m[0][0] * m[1][1] - m[0][1] * m[1][0]\n  return m[0].reduce(\n    (acc, val, j) => val * (j % 2 ? -1 : 1) * determinant(removedRowCol(m, 0, j)) + acc,\n    0,\n  )\n}\n\nexport const determinant3 = m => {\n  return (\n    m[0][0] * (m[1][1] * m[2][2] - m[1][2] * m[2][1]) -\n    m[0][1] * (m[1][0] * m[2][2] - m[1][2] * m[2][0]) +\n    m[0][2] * (m[1][0] * m[2][1] - m[1][1] * m[2][0])\n  )\n}\n\nconst adj = m => {\n  return m.map((row, i) =>\n    row.map((_, j) => ((i + j) % 2 ? -1 : 1) * determinant(removedRowCol(m, j, i))),\n  )\n}\n\nexport const vecdiv = (v, scalar) => v.map(x => x / scalar)\n\nexport const inverse = m => {\n  let det = determinant(m)\n  return adj(m).map(v => vecdiv(v, det))\n}\n\n// this reduces render time significantly as\n// opposed to using inverse()\nexport const inverse3 = m => {\n  let det =\n    m[0][0] * (m[1][1] * m[2][2] - m[1][2] * m[2][1]) -\n    m[0][1] * (m[1][0] * m[2][2] - m[1][2] * m[2][0]) +\n    m[0][2] * (m[1][0] * m[2][1] - m[1][1] * m[2][0])\n\n  return [\n    [\n      (m[1][1] * m[2][2] - m[1][2] * m[2][1]) / det,\n      (-m[0][1] * m[2][2] + m[0][2] * m[2][1]) / det,\n      (m[0][1] * m[1][2] - m[0][2] * m[1][1]) / det,\n    ],\n    [\n      (-m[1][0] * m[2][2] + m[1][2] * m[2][0]) / det,\n      (m[0][0] * m[2][2] - m[0][2] * m[2][0]) / det,\n      (-m[0][0] * m[1][2] + m[0][2] * m[1][0]) / det,\n    ],\n    [\n      (m[1][0] * m[2][1] - m[1][1] * m[2][0]) / det,\n      (-m[0][0] * m[2][1] + m[0][1] * m[2][0]) / det,\n      (m[0][0] * m[1][1] - m[0][1] * m[1][0]) / det,\n    ],\n  ]\n}\n\nexport const columnVector = a => {\n  return a.map(v => [v])\n}\n\nexport const transpose = a => {\n  let m = a.length\n  let n = a[0].length\n\n  if (n === undefined) return a.map(v => [v])\n\n  return [...Array(n).keys()].map(i => [...Array(m).keys()].map(j => a[j][i]))\n}\n\nexport const matmulvec = (m, v) => {\n  return [\n    m[0][0] * v[0] + m[0][1] * v[1] + m[0][2] * v[2],\n    m[1][0] * v[0] + m[1][1] * v[1] + m[1][2] * v[2],\n    m[2][0] * v[0] + m[2][1] * v[1] + m[2][2] * v[2],\n  ]\n}\n\nexport const matmulvec4aug = (m, v, aug) => {\n  return [\n    m[0][0] * v[0] + m[0][1] * v[1] + m[0][2] * v[2] + m[0][3] * aug,\n    m[1][0] * v[0] + m[1][1] * v[1] + m[1][2] * v[2] + m[1][3] * aug,\n    m[2][0] * v[0] + m[2][1] * v[1] + m[2][2] * v[2] + m[2][3] * aug,\n    m[3][0] * v[0] + m[3][1] * v[1] + m[3][2] * v[2] + m[3][3] * aug,\n  ]\n}\n\nexport const matmul4 = (a, b) => {\n  let result = [\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n  ]\n\n  for (let i = 0; i < 4; i++) {\n    for (let j = 0; j < 4; j++) {\n      let val = 0\n      for (let k = 0; k < 4; k++) {\n        val += a[i][k] * b[k][j]\n      }\n      result[i][j] = val\n    }\n  }\n  return result\n}\n\nexport const matmul = (a, b, out) => {\n  if (a[0].length != b.length || !a[0].length || !b[0].length) throw Error(\"Dimension error\")\n  let m = a.length\n  let n = b[0].length\n  let o = a[0].length\n\n  let result = out ?? Array.from(Array(m)).map(_ => [])\n  for (let i = 0; i < m; i++) {\n    for (let j = 0; j < n; j++) {\n      let val = 0\n      for (let k = 0; k < o; k++) {\n        val += a[i][k] * b[k][j]\n      }\n      result[i][j] = val\n    }\n  }\n  return result\n}\n\nexport const identity_4 = [\n  [1, 0, 0, 0],\n  [0, 1, 0, 0],\n  [0, 0, 1, 0],\n  [0, 0, 0, 1],\n]\n\nexport const mToV = m => vecdiv(m, m[3]).slice(0, 3)\n","import { matmul, cross, normalize, subtract } from \"./vecOps\"\n\nexport function barycentric(v0, v1, v2, x, y) {\n  let u = cross(\n    [v2[0] - v0[0], v1[0] - v0[0], v0[0] - x],\n    [v2[1] - v0[1], v1[1] - v0[1], v0[1] - y],\n  )\n  if (Math.abs(u[2]) < 1) return [-1, 0, 0]\n  return [1 - (u[0] + u[1]) / u[2], u[1] / u[2], u[0] / u[2]]\n}\n\nexport function calcModelViewMatrix(cameraPosition, cameraUp, center) {\n  let z = normalize(subtract(cameraPosition, center))\n  let x = normalize(cross(cameraUp, z))\n  let y = normalize(cross(z, x))\n\n  // \"Minv\" in the Lesson\n  let basisMatrix = [\n    [...x, 0],\n    [...y, 0],\n    [...z, 0],\n    [0, 0, 0, 1],\n  ]\n  let translate = [\n    [1, 0, 0, -center[0]],\n    [0, 1, 0, -center[1]],\n    [0, 0, 1, -center[2]],\n    [0, 0, 0, 1],\n  ]\n\n  return matmul(basisMatrix, translate)\n}\n\nexport function calcPerspectiveMatrix(c) {\n  // it looks like the final operation of\n  // \"div by the augmented 4th coordinate value to make it 1\"\n  // can be separated.\n  // so it's possible to multiply all rest of matrix first\n\n  return [\n    [1, 0, 0, 0],\n    [0, 1, 0, 0],\n    [0, 0, 1, 0],\n    [0, 0, -1 / c, 1],\n  ]\n}\n\n/**\n * it's more of \"mapping model to the screen\"\n *\n * x,y is relative to the screen\n *\n * d is for resolution for z\n */\nexport function calcViewportMatrix(x, y, width, height, d = 255) {\n  return [\n    [width / 2, 0, 0, x + width / 2],\n    [0, height / 2, 0, y + height / 2],\n    [0, 0, d / 2, d / 2],\n    [0, 0, 0, 1],\n  ]\n}\n","import { dot, matmul, vecdiv } from \"./vecOps\"\nimport { barycentric } from \"./utils\"\n\nexport function triangleWithZBuffer(v0, v1, v2, shader, zBuffer, data, width, viewportTr) {\n  // apply viewport, div by aug here\n  ;[v0, v1, v2] = matmul([v0, v1, v2], viewportTr).map(v => vecdiv(v.slice(0, 3), v[3]))\n\n  let bbmin = [\n    Math.max(0, parseInt(Math.min(v0[0], v1[0], v2[0]))),\n    Math.max(0, parseInt(Math.min(v0[1], v1[1], v2[1]))),\n  ]\n  let bbmax = [\n    Math.min(width, parseInt(Math.max(v0[0], v1[0], v2[0]))),\n    Math.min(width, parseInt(Math.max(v0[1], v1[1], v2[1]))),\n  ]\n\n  for (let x = bbmin[0]; x <= bbmax[0]; x++) {\n    for (let y = bbmin[1]; y <= bbmax[1]; y++) {\n      let bc = barycentric(v0, v1, v2, x, y)\n\n      if (bc[0] < 0 || bc[1] < 0 || bc[2] < 0) continue\n\n      // NOTE: ssloy uses sum of weighted z,\n      // depth = sum(z) / sum(w: 4th value)\n      // whereas I (and in his previous lessons)\n      // use sum of z divided by aug value.\n      // the render doesn't change visually, perhaps lack of many competing\n      // z values in this model / scene.\n      let z = dot([v0[2], v1[2], v2[2]], bc)\n\n      let bufferIdx = (width - 1 - y) * width + x\n      if (zBuffer[bufferIdx] > z) continue\n\n      let color = [0, 0, 0, 255]\n      let discard = shader.fragment(bc, color)\n\n      if (!discard) {\n        zBuffer[bufferIdx] = z\n        data[bufferIdx * 4] = color[0]\n        data[bufferIdx * 4 + 1] = color[1]\n        data[bufferIdx * 4 + 2] = color[2]\n        data[bufferIdx * 4 + 3] = color[3]\n      }\n    }\n  }\n}\n","import { calcModelViewMatrix, calcPerspectiveMatrix, calcViewportMatrix } from \"./utils\"\nimport { abs, matmul, subtract, transpose } from \"./vecOps\"\n\nexport class PerspectiveCamera {\n  constructor({ position, lookAt = [0, 0, 0], up = [0, 1, 0], viewport }) {\n    this.position = position\n    this.lookAt = lookAt\n    this.up = up\n\n    // FIXME\n    // this \"size\" probably not a viewport size in THREE.js\n    // THREE.js use **two** versions of width and height\n    // for each camera and viewport\n    // here, use one as viewport\n    this.vW = viewport[0]\n    this.vH = viewport[1]\n\n    let perspective = calcPerspectiveMatrix(abs(subtract(position, lookAt)))\n    let modelView = calcModelViewMatrix(position, up, lookAt)\n    this.uniM = matmul(perspective, modelView)\n    this.viewportTr = transpose(calcViewportMatrix(0, 0, this.vW, this.vH, 255))\n  }\n\n  update({ position, lookAt, up }) {\n    this.position = position ?? this.position\n    this.lookAt = lookAt ?? this.lookAt\n    this.up = up ?? this.up\n\n    let perspective = calcPerspectiveMatrix(abs(subtract(this.position, this.lookAt)))\n    let modelView = calcModelViewMatrix(this.position, this.up, this.lookAt)\n    this.uniM = matmul(perspective, modelView)\n  }\n}\n","import { triangleWithZBuffer } from \"./utils/drawer\"\nexport { PerspectiveCamera } from \"./utils/PerspectiveCamera\"\nexport { TinyRenderer }\n\n/**\n * Simple class to use in other scripts easily.\n * Tried to follow the structure of THREE.js'\n */\nclass TinyRenderer {\n  constructor({ target }) {\n    let canvas = (this.domElement = target || document.createElement(\"canvas\"))\n    this.ctx = canvas.getContext(\"2d\")\n  }\n\n  setSize(width, height) {\n    this.domElement.width = width\n    this.domElement.height = height\n    this.zBuffer = new Uint8ClampedArray(width * height * 4)\n  }\n\n  render(scene, camera) {\n    let { vW, vH } = camera\n    this.ctx.clearRect(0, 0, vW, vH)\n    let imgData = this.ctx.getImageData(0, 0, vW, vH)\n    let data = imgData.data\n    this.zBuffer.fill(-Infinity)\n\n    // setup\n    let { model, light } = scene\n    let { shader } = model\n    let { viewportTr } = camera\n\n    shader.updateUniform({\n      uniM: camera.uniM,\n      lightDir: light.dir,\n    })\n\n    // render a model\n    let renderingTime = new Date()\n    let coords = []\n    for (let fi = 0; fi < model.faces.length; fi++) {\n      for (let vi = 0; vi < 3; vi++) {\n        coords[vi] = shader.vertex(fi, vi)\n      }\n      triangleWithZBuffer(...coords, shader, this.zBuffer, data, vW, viewportTr)\n    }\n    console.log(\"render: \", new Date() - renderingTime, \"ms\")\n    this.ctx.putImageData(imgData, 0, 0)\n  }\n}\n","import {\n  inverse3,\n  inverse,\n  dot,\n  matmul,\n  matmulvec,\n  subtract,\n  transpose,\n  iNormalize3,\n  matmulvec4aug,\n} from \"./vecOps\"\n\nclass Shader {\n  updateUniform(uniform) {\n    this.uniM = uniform.uniM ?? this.uniM\n    this.uniMIT = uniform.uniM ? inverse(transpose(this.uniM)) : this.uniMIT\n    this.lightDirTrx =\n      uniform.uniM || uniform.lightDir\n        ? iNormalize3(matmulvec4aug(this.uniM, uniform.lightDir, 1).slice(0, 3))\n        : this.lightDirTrx\n  }\n}\n\nexport class GouraudShader extends Shader {\n  constructor(uniform) {\n    super()\n    this.model = uniform.model\n    this.varyingIntensity = []\n  }\n\n  vertex(fi, vi) {\n    let vertexNumber = this.model.faces[fi].v[vi]\n    let vertex = this.model.vertices[vertexNumber]\n    let vertexNormal = iNormalize3(\n      matmulvec4aug(this.uniMIT, this.model.vns[vertexNumber], 0).slice(0, 3),\n    )\n\n    let coord = matmulvec4aug(this.uniM, vertex, 1)\n    this.varyingIntensity[vi] = dot(vertexNormal, this.lightDirTrx)\n    return coord\n  }\n\n  fragment(bc, color) {\n    let intensity = dot(this.varyingIntensity, bc)\n    color[0] = intensity * 255\n    color[1] = intensity * 255\n    color[2] = intensity * 255\n    return false\n  }\n}\n\n// Texture + Intensity by light * interpolated vertex normal\nexport class ShaderWithTexture extends Shader {\n  constructor(uniform) {\n    super()\n    this.model = uniform.model\n    this.diffuse = uniform.diffuse\n\n    this.diffuseW = this.diffuse.header.width\n    this.diffuseH = this.diffuse.header.height\n    this.varyingIntensity = []\n    this.varyingVertexTextureUV = []\n  }\n\n  vertex(fi, vi) {\n    let vertexNumber = this.model.faces[fi].v[vi]\n    let vertex = this.model.vertices[vertexNumber]\n    let vertexNormal = iNormalize3(\n      matmulvec4aug(this.uniMIT, this.model.vns[vertexNumber], 0).slice(0, 3),\n    )\n\n    let coord = matmulvec4aug(this.uniM, vertex, 1)\n    this.varyingIntensity[vi] = Math.max(0, dot(vertexNormal, this.lightDirTrx))\n\n    let vertexTextureNumber = this.model.faces[fi].vt[vi]\n    this.varyingVertexTextureUV[vi] = this.model.vts[vertexTextureNumber]\n    return coord\n  }\n\n  fragment(bc, color) {\n    let intensity = dot(this.varyingIntensity, bc)\n    let [u, v] = matmul([bc], this.varyingVertexTextureUV)[0].map(v => parseInt(v * 1024))\n    let k = u + (this.diffuseH - 1 - v) * this.diffuseW\n    color[0] = this.diffuse.imageData[4 * k] * intensity\n    color[1] = this.diffuse.imageData[4 * k + 1] * intensity\n    color[2] = this.diffuse.imageData[4 * k + 2] * intensity\n    return false\n  }\n}\n\nexport class TextureAndNormalMap extends Shader {\n  constructor(uniform) {\n    super()\n    this.model = uniform.model\n    this.diffuse = uniform.diffuse\n    this.normal = uniform.normal\n\n    this.diffuseW = this.diffuse.header.width\n    this.diffuseH = this.diffuse.header.height\n    this.varyingVertexTextureUV = []\n  }\n\n  vertex(fi, vi) {\n    let vertexNumber = this.model.faces[fi].v[vi]\n    let vertex = this.model.vertices[vertexNumber]\n    let coord = matmulvec4aug(this.uniM, vertex, 1)\n\n    let vertexTextureNumber = this.model.faces[fi].vt[vi]\n    this.varyingVertexTextureUV[vi] = this.model.vts[vertexTextureNumber]\n    return coord\n  }\n\n  fragment(bc, color) {\n    let [u, v] = matmul([bc], this.varyingVertexTextureUV)[0].map(v => parseInt(v * 1024))\n    let k = u + (this.diffuseH - 1 - v) * this.diffuseW\n\n    let normalData = iNormalize3([\n      // FIXME: not tangentNM, it's global but stick to name for now.\n      (this.normal.imageData[4 * k] / 255) * 2 - 1,\n      (this.normal.imageData[4 * k + 1] / 255) * 2 - 1,\n      (this.normal.imageData[4 * k + 2] / 255) * 2 - 1,\n      // based on the ssloy's normal(facei, vi)\n      // this effectively switch x with z\n      // this makes no change to render weirdly.\n      // .reverse(),\n    ])\n\n    let normal = iNormalize3(matmulvec4aug(this.uniMIT, normalData, 0).slice(0, 3))\n    let intensity = Math.min(1, Math.max(0, dot(normal, this.lightDirTrx)))\n\n    color[0] = this.diffuse.imageData[4 * k] * intensity\n    color[1] = this.diffuse.imageData[4 * k + 1] * intensity\n    color[2] = this.diffuse.imageData[4 * k + 2] * intensity\n    color[3] = this.diffuse.imageData[4 * k + 3]\n    return false\n  }\n}\n\n// Phong lighting\nexport class DiffuseNormalSpecular extends Shader {\n  constructor(uniform) {\n    super()\n    this.model = uniform.model\n    this.diffuse = uniform.diffuse\n    this.normal = uniform.normal\n    this.specular = uniform.specular\n\n    this.diffuseW = this.diffuse.header.width\n    this.diffuseH = this.diffuse.header.height\n    this.varyingVertexTextureUV = []\n  }\n\n  vertex(fi, vi) {\n    let vertexNumber = this.model.faces[fi].v[vi]\n    let vertex = this.model.vertices[vertexNumber]\n    let coord = matmulvec4aug(this.uniM, vertex, 1)\n\n    let vertexTextureNumber = this.model.faces[fi].vt[vi]\n    this.varyingVertexTextureUV[vi] = this.model.vts[vertexTextureNumber]\n    return coord\n  }\n\n  fragment(bc, color) {\n    let [u, v] = matmul([bc], this.varyingVertexTextureUV)[0].map(v => parseInt(v * 1024))\n    let k = u + (this.diffuseH - 1 - v) * this.diffuseW\n\n    let normalData = iNormalize3([\n      (this.normal.imageData[4 * k] / 255) * 2 - 1,\n      (this.normal.imageData[4 * k + 1] / 255) * 2 - 1,\n      (this.normal.imageData[4 * k + 2] / 255) * 2 - 1,\n    ])\n\n    let normal = iNormalize3(\n      // TODO: check <embed>4 does aug 0 or aug 1\n      // and check which is correct: 1 yields less contrast, bright image\n      // matmul(this.uniMIT, columnVector([...normalData, 0]))\n      //   .map(v => v[0])\n      //   .slice(0, 3),\n      matmulvec4aug(this.uniMIT, normalData, 0).slice(0, 3),\n    )\n\n    // \"intensity\" before\n    let diff = Math.min(1, Math.max(0, dot(normal, this.lightDirTrx)))\n\n    // n * (2n * l) - l\n    let dotted = 2 * dot(normal, this.lightDirTrx)\n    let reflection = iNormalize3([\n      normal[0] * dotted - this.lightDirTrx[0],\n      normal[1] * dotted - this.lightDirTrx[1],\n      normal[2] * dotted - this.lightDirTrx[2],\n    ])\n\n    // spec is 1024 * 1024 * 8bit data but TGALoader reads 32bits as [v,v,v,255]\n    let specData = this.specular.imageData[4 * k]\n    let spec = Math.max(0, reflection[2]) ** specData\n    let value = diff + spec * 0.6\n    color[0] = Math.min(255, 5 + this.diffuse.imageData[4 * k] * value)\n    color[1] = Math.min(255, 5 + this.diffuse.imageData[4 * k + 1] * value)\n    color[2] = Math.min(255, 5 + this.diffuse.imageData[4 * k + 2] * value)\n    color[3] = this.diffuse.imageData[4 * k + 3]\n    return false\n  }\n}\n\n/**\n * Phong lighting using Tangent-Space Normal Map\n *\n * materials for Tangent-Space NM TNB matrix:\n * http://www.opengl-tutorial.org/intermediate-tutorials/tutorial-13-normal-mapping/\n * https://learnopengl.com/Advanced-Lighting/Normal-Mapping\n */\nexport class DiffuseTangentNormalSpecular extends Shader {\n  constructor(uniform) {\n    super()\n    this.model = uniform.model\n    this.diffuse = uniform.diffuse\n    this.normal = uniform.normal\n    this.specular = uniform.specular\n\n    this.diffuseW = this.diffuse.header.width\n    this.diffuseH = this.diffuse.header.height\n    this.varyingVertexTextureUV = []\n    this.vertexNormals = []\n    this.varyingCoord = []\n  }\n\n  vertex(fi, vi) {\n    let vertexNumber = this.model.faces[fi].v[vi]\n    let vertex = this.model.vertices[vertexNumber]\n\n    // apply viewport after, only proj, modelview here\n    // it doesn't feel right to apply viewport here\n    // since coordinate values are used to calculate\n    // TNB matrix\n    let coords = matmulvec4aug(this.uniM, vertex, 1)\n    this.varyingCoord[vi] = [coords[0] / coords[3], coords[1] / coords[3], coords[2] / coords[3]]\n\n    let vertexTextureNumber = this.model.faces[fi].vt[vi]\n    this.varyingVertexTextureUV[vi] = this.model.vts[vertexTextureNumber]\n\n    this.vertexNormals[vi] = iNormalize3(\n      matmulvec4aug(this.uniMIT, this.model.vns[this.model.faces[fi].vn[vi]], 0).slice(0, 3),\n    )\n    return coords\n  }\n\n  // some are not optimized as faster version below\n  // for readability\n  fragment(bc, color) {\n    let [u, v] = matmul([bc], this.varyingVertexTextureUV)[0].map(v => parseInt(v * 1024))\n    let k = u + (this.diffuseH - 1 - v) * this.diffuseW\n    let intN = iNormalize3(matmul([bc], this.vertexNormals)[0])\n    let tangentNormal = [\n      (this.normal.imageData[4 * k] / 255) * 2 - 1,\n      (this.normal.imageData[4 * k + 1] / 255) * 2 - 1,\n      (this.normal.imageData[4 * k + 2] / 255) * 2 - 1,\n    ]\n\n    let e1 = subtract(this.varyingCoord[1], this.varyingCoord[0])\n    let e2 = subtract(this.varyingCoord[2], this.varyingCoord[0])\n\n    // NOTE: d(E) = d(UV) as in applying component vector\n    // dT = du, dB = dv\n    //\n    // E_xyz * dT = UV_u\n    // E_xyz * dB = UV_v\n    //\n    // i.e, E * TBN = UV\n    // TBN = inv(E) * UV\n    let invE = inverse3([e1, e2, intN])\n\n    let t1 = subtract(this.varyingVertexTextureUV[1], this.varyingVertexTextureUV[0])\n    let t2 = subtract(this.varyingVertexTextureUV[2], this.varyingVertexTextureUV[0])\n    t1[2] = 0\n    t2[2] = 0\n\n    let TBN = matmul(invE, [t1, t2, [0, 0, 0]])\n\n    TBN = transpose(TBN)\n    iNormalize3(TBN[0])\n    iNormalize3(TBN[1])\n    TBN[2] = intN\n\n    let normal = iNormalize3(matmul([tangentNormal], TBN)[0])\n    let diff = Math.max(0, dot(normal, this.lightDirTrx))\n\n    // specular\n    // n * (2n * l) - l\n    let dotted = 2 * dot(normal, this.lightDirTrx)\n    let reflection = iNormalize3([\n      normal[0] * dotted - this.lightDirTrx[0],\n      normal[1] * dotted - this.lightDirTrx[1],\n      normal[2] * dotted - this.lightDirTrx[2],\n    ])\n\n    // spec is 1024 * 1024 * 8bit data but TGALoader reads 32bits as [v,v,v,255]\n    let specData = this.specular.imageData[4 * k]\n    let spec = Math.max(0, reflection[2]) ** specData\n    let value = diff + spec * 0.6\n\n    color[0] = Math.min(255, 5 + this.diffuse.imageData[4 * k] * value)\n    color[1] = Math.min(255, 5 + this.diffuse.imageData[4 * k + 1] * value)\n    color[2] = Math.min(255, 5 + this.diffuse.imageData[4 * k + 2] * value)\n    color[3] = this.diffuse.imageData[4 * k + 3]\n    return false\n  }\n}\n\n/**\n * Faster version of above [DiffuseTangentNormalSpecular]\n * hardcoded some calculations. Takes about half (2000ms -> 800ms)\n */\nexport class FastDiffuseTangentNormalSpecular extends Shader {\n  constructor(uniform) {\n    super()\n    // FIXME feels awkard to set model as uniform, fine for now tho\n    this.model = uniform.model\n    this.diffuse = uniform.diffuse\n    this.normal = uniform.normal\n    this.specular = uniform.specular\n\n    this.diffuseW = this.diffuse.header.width\n    this.diffuseH = this.diffuse.header.height\n    this.varyingVertexTextureUV = []\n    this.vertexNormals = []\n    this.varyingCoord = []\n  }\n\n  vertex(fi, vi) {\n    let vertexNumber = this.model.faces[fi].v[vi]\n    let vertex = this.model.vertices[vertexNumber]\n\n    let coords = matmulvec4aug(this.uniM, vertex, 1)\n    this.varyingCoord[vi] = [coords[0] / coords[3], coords[1] / coords[3], coords[2] / coords[3]]\n\n    let vertexTextureNumber = this.model.faces[fi].vt[vi]\n    this.varyingVertexTextureUV[vi] = this.model.vts[vertexTextureNumber]\n\n    this.vertexNormals[vi] = iNormalize3(\n      matmulvec4aug(this.uniMIT, this.model.vns[this.model.faces[fi].vn[vi]], 0).slice(0, 3),\n    )\n    return coords\n  }\n\n  fragment(bc, color) {\n    let [u, v] = [\n      parseInt(\n        (bc[0] * this.varyingVertexTextureUV[0][0] +\n          bc[1] * this.varyingVertexTextureUV[1][0] +\n          bc[2] * this.varyingVertexTextureUV[2][0]) *\n          1024,\n      ),\n      parseInt(\n        (bc[0] * this.varyingVertexTextureUV[0][1] +\n          bc[1] * this.varyingVertexTextureUV[1][1] +\n          bc[2] * this.varyingVertexTextureUV[2][1]) *\n          1024,\n      ),\n      parseInt(\n        (bc[0] * this.varyingVertexTextureUV[0][2] +\n          bc[1] * this.varyingVertexTextureUV[1][2] +\n          bc[2] * this.varyingVertexTextureUV[2][2]) *\n          1024,\n      ),\n    ]\n\n    let k = u + (this.diffuseH - 1 - v) * this.diffuseW\n\n    let intN = iNormalize3([\n      bc[0] * this.vertexNormals[0][0] +\n        bc[1] * this.vertexNormals[1][0] +\n        bc[2] * this.vertexNormals[2][0],\n      bc[0] * this.vertexNormals[0][1] +\n        bc[1] * this.vertexNormals[1][1] +\n        bc[2] * this.vertexNormals[2][1],\n      bc[0] * this.vertexNormals[0][2] +\n        bc[1] * this.vertexNormals[1][2] +\n        bc[2] * this.vertexNormals[2][2],\n    ])\n\n    let tangentNormal = [\n      (this.normal.imageData[4 * k] / 255) * 2 - 1,\n      (this.normal.imageData[4 * k + 1] / 255) * 2 - 1,\n      (this.normal.imageData[4 * k + 2] / 255) * 2 - 1,\n    ]\n\n    let iE = inverse3([\n      [\n        this.varyingCoord[1][0] - this.varyingCoord[0][0],\n        this.varyingCoord[1][1] - this.varyingCoord[0][1],\n        this.varyingCoord[1][2] - this.varyingCoord[0][2],\n      ],\n      [\n        this.varyingCoord[2][0] - this.varyingCoord[0][0],\n        this.varyingCoord[2][1] - this.varyingCoord[0][1],\n        this.varyingCoord[2][2] - this.varyingCoord[0][2],\n      ],\n      intN,\n    ])\n\n    let t1 = [\n      this.varyingVertexTextureUV[1][0] - this.varyingVertexTextureUV[0][0],\n      this.varyingVertexTextureUV[1][1] - this.varyingVertexTextureUV[0][1],\n      0,\n    ]\n    let t2 = [\n      this.varyingVertexTextureUV[2][0] - this.varyingVertexTextureUV[0][0],\n      this.varyingVertexTextureUV[2][1] - this.varyingVertexTextureUV[0][1],\n      0,\n    ]\n\n    // hardcoded to optimize calculation, avoid function calls\n    // fragment() takes about half\n    // TBN = matmul(iE, [t1, t2, [0, 0, 0]])\n    // + set 3rd column with intN\n    // + normalize column 1, 2\n    let TBN = []\n    TBN[0] = [iE[0][0] * t1[0] + iE[0][1] * t2[0], iE[0][0] * t1[1] + iE[0][1] * t2[1], intN[0]]\n    TBN[1] = [iE[1][0] * t1[0] + iE[1][1] * t2[0], iE[1][0] * t1[1] + iE[1][1] * t2[1], intN[1]]\n    TBN[2] = [iE[2][0] * t1[0] + iE[2][1] * t2[0], iE[2][0] * t1[1] + iE[2][1] * t2[1], intN[2]]\n\n    let tNorm = Math.sqrt(TBN[0][0] ** 2 + TBN[1][0] ** 2 + TBN[2][0] ** 2)\n    let bNorm = Math.sqrt(TBN[0][1] ** 2 + TBN[1][1] ** 2 + TBN[2][1] ** 2)\n\n    TBN[0][0] /= tNorm\n    TBN[1][0] /= tNorm\n    TBN[2][0] /= tNorm\n\n    TBN[0][1] /= bNorm\n    TBN[1][1] /= bNorm\n    TBN[2][1] /= bNorm\n\n    let normal = iNormalize3(matmulvec(TBN, tangentNormal))\n    let diff = Math.max(0, dot(normal, this.lightDirTrx))\n\n    let dotted = 2 * dot(normal, this.lightDirTrx)\n    let reflection = iNormalize3(\n      subtract(\n        normal.map(v => v * dotted),\n        this.lightDirTrx,\n      ),\n    )\n\n    // spec is 1024 * 1024 * 8bit data but TGALoader reads 32bits as [v,v,v,255]\n    let specData = this.specular.imageData[4 * k]\n    let spec = Math.max(0, reflection[2]) ** specData\n    let value = diff + spec * 0.6\n\n    color[0] = Math.min(255, 5 + this.diffuse.imageData[4 * k] * value)\n    color[1] = Math.min(255, 5 + this.diffuse.imageData[4 * k + 1] * value)\n    color[2] = Math.min(255, 5 + this.diffuse.imageData[4 * k + 2] * value)\n    color[3] = this.diffuse.imageData[4 * k + 3]\n    return false\n  }\n}\n","/**\n * @license tga-js 1.1.1\n * Copyright (c) 2013-2020 Vincent Thibault, Inc.\n * License: MIT\n */\nconst e=0,t=1,a=3,r=9,o=10,i=11,s=0,h=2,n=3,g=4,l=48;export default class{_checkHeader(){const t=this.header;if(t.imageType===e)throw Error(\"No data\");if(t.hasColorMap){if(t.colorMapLength>256||24!==t.colorMapDepth||1!==t.colorMapType)throw Error(\"Invalid colormap for indexed type\")}else if(t.colorMapType)throw Error(\"Why does the image contain a palette ?\");if(!t.width||!t.height)throw Error(\"Invalid image size\");if(8!==t.pixelDepth&&16!==t.pixelDepth&&24!==t.pixelDepth&&32!==t.pixelDepth)throw Error('Invalid pixel size \"'+t.pixelDepth+'\"')}_decodeRLE(e,t,a,r){const o=new Uint8Array(r),i=new Uint8Array(a);let s=0;for(;s<r;){const r=e[t++];let h=1+(127&r);if(128&r){for(let r=0;r<a;++r)i[r]=e[t+r];t+=a;for(let e=0;e<h;++e)o.set(i,s),s+=a}else{h*=a;for(let a=0;a<h;++a)o[s+a]=e[t+a];s+=h,t+=h}}return o}_getImageData8bits(e,t,a,r,o,i,s,h,n,g){for(let l=0,p=o;p!==s;p+=i)for(let o=h;o!==g;o+=n,l++){const i=t[l];e[4*(o+r*p)+3]=255,e[4*(o+r*p)+2]=a[3*i+0],e[4*(o+r*p)+1]=a[3*i+1],e[4*(o+r*p)+0]=a[3*i+2]}return e}_getImageData16bits(e,t,a,r,o,i,s,h,n,g){for(let a=0,l=o;l!==s;l+=i)for(let o=h;o!==g;o+=n,a+=2){const i=t[a+0]|t[a+1]<<8;e[4*(o+r*l)+0]=(31744&i)>>7,e[4*(o+r*l)+1]=(992&i)>>2,e[4*(o+r*l)+2]=(31&i)>>3,e[4*(o+r*l)+3]=32768&i?0:255}return e}_getImageData24bits(e,t,a,r,o,i,s,h,n,g){for(let a=0,l=o;l!==s;l+=i)for(let o=h;o!==g;o+=n,a+=3)e[4*(o+r*l)+3]=255,e[4*(o+r*l)+2]=t[a+0],e[4*(o+r*l)+1]=t[a+1],e[4*(o+r*l)+0]=t[a+2];return e}_getImageData32bits(e,t,a,r,o,i,s,h,n,g){for(let a=0,l=o;l!==s;l+=i)for(let o=h;o!==g;o+=n,a+=4)e[4*(o+r*l)+2]=t[a+0],e[4*(o+r*l)+1]=t[a+1],e[4*(o+r*l)+0]=t[a+2],e[4*(o+r*l)+3]=t[a+3];return e}_getImageDataGrey8bits(e,t,a,r,o,i,s,h,n,g){for(let a=0,l=o;l!==s;l+=i)for(let o=h;o!==g;o+=n,a++){const i=t[a];e[4*(o+r*l)+0]=i,e[4*(o+r*l)+1]=i,e[4*(o+r*l)+2]=i,e[4*(o+r*l)+3]=255}return e}_getImageDataGrey16bits(e,t,a,r,o,i,s,h,n,g){for(let a=0,l=o;l!==s;l+=i)for(let o=h;o!==g;o+=n,a+=2)e[4*(o+r*l)+0]=t[a+0],e[4*(o+r*l)+1]=t[a+0],e[4*(o+r*l)+2]=t[a+0],e[4*(o+r*l)+3]=t[a+1];return e}open(e,t){const a=new XMLHttpRequest;a.responseType=\"arraybuffer\",a.open(\"GET\",e,!0),a.onload=(()=>{200===a.status&&(this.load(new Uint8Array(a.response)),t&&t())}),a.send(null)}load(e){let s=0;if(e.length<18)throw Error(\"Not enough data to contain header\");const h={idLength:e[s++],colorMapType:e[s++],imageType:e[s++],colorMapIndex:e[s++]|e[s++]<<8,colorMapLength:e[s++]|e[s++]<<8,colorMapDepth:e[s++],offsetX:e[s++]|e[s++]<<8,offsetY:e[s++]|e[s++]<<8,width:e[s++]|e[s++]<<8,height:e[s++]|e[s++]<<8,pixelDepth:e[s++],flags:e[s++]};if(h.hasEncoding=h.imageType===r||h.imageType===o||h.imageType===i,h.hasColorMap=h.imageType===r||h.imageType===t,h.isGreyColor=h.imageType===i||h.imageType===a,this.header=h,this._checkHeader(),(s+=h.idLength)>=e.length)throw Error(\"No data\");if(h.hasColorMap){const t=h.colorMapLength*(h.colorMapDepth>>3);this.palette=e.subarray(s,s+t),s+=t}const n=h.pixelDepth>>3,g=h.width*h.height,l=g*n;h.hasEncoding?this.imageData=this._decodeRLE(e,s,n,l):this.imageData=e.subarray(s,s+(h.hasColorMap?g:l))}getImageData(e){const{width:t,height:a,flags:r,pixelDepth:o,isGreyColor:i}=this.header,p=(r&l)>>g;let c,d,m,f,D,y,u;switch(e||(e=document?document.createElement(\"canvas\").getContext(\"2d\").createImageData(t,a):{width:t,height:a,data:new Uint8ClampedArray(t*a*4)}),p===h||p===n?(f=0,D=1,y=a):(f=a-1,D=-1,y=-1),p===h||p===s?(c=0,d=1,m=t):(c=t-1,d=-1,m=-1),o){case 8:u=i?this._getImageDataGrey8bits:this._getImageData8bits;break;case 16:u=i?this._getImageDataGrey16bits:this._getImageData16bits;break;case 24:u=this._getImageData24bits;break;case 32:u=this._getImageData32bits}return u.call(this,e.data,this.imageData,this.palette,t,f,D,y,c,d,m),e}getCanvas(){const{width:e,height:t}=this.header,a=document.createElement(\"canvas\"),r=a.getContext(\"2d\"),o=r.createImageData(e,t);return a.width=e,a.height=t,r.putImageData(this.getImageData(o),0,0),a}getDataURL(e){return this.getCanvas().toDataURL(e||\"image/png\")}}\n","import TGALoader from \"tga-js\"\n\nexport class Loader {\n  constructor() {\n    this.items = new Map()\n  }\n\n  // returns key-mapped asset collection object\n  all() {\n    return Promise.all(this.items.values()).then(values => {\n      let out = {}\n      ;[...this.items.keys()].forEach((key, idx) => (out[key] = values[idx]))\n      return out\n    })\n  }\n\n  addModel(key, src) {\n    this.items.set(key, loadModel(src))\n  }\n\n  addTexture(key, src) {\n    this.items.set(key, loadTGA(src))\n  }\n}\n\nexport function loadTGA(src) {\n  return new Promise(resolve => {\n    const tgaLoader = new TGALoader()\n    tgaLoader.open(src, () => {\n      resolve({\n        imageData: tgaLoader.getImageData().data,\n        header: tgaLoader.header,\n      })\n    })\n  })\n}\n\nexport function loadModel(src) {\n  return fetch(src)\n    .then(r => r.text())\n    .then(text => text.split(\"\\n\"))\n    .then(lines => {\n      let vertices = []\n      let faces = []\n      let vts = []\n      let vns = []\n\n      lines.forEach(line => {\n        let type = line.split(\" \", 1)[0]\n        if (type === \"v\") {\n          vertices.push(\n            line\n              .split(\" \")\n              .filter(_ => _ != \"\")\n              .splice(1)\n              .map(v => Number(v)),\n          )\n        } else if (type === \"vt\") {\n          vts.push(\n            line\n              .match(/ [\\d.]+/g)\n              .slice(0, 2)\n              .map(Number),\n          )\n        } else if (type === \"vn\") {\n          vns.push(\n            line\n              .split(\" \")\n              .filter(_ => _ != \"\")\n              .splice(1)\n              .map(v => Number(v)),\n          )\n        } else if (type === \"f\") {\n          let matches = Array.from(line.matchAll(/ (\\d+)\\/(\\d+)\\/(\\d+)/g))\n          let face = {\n            v: matches.map(m => Number(m[1]) - 1),\n            vt: matches.map(m => Number(m[2]) - 1),\n            vn: matches.map(m => Number(m[3]) - 1),\n          }\n          faces.push(face)\n        }\n      })\n      return { vertices, faces, vts, vns }\n    })\n}\n","import { TinyRenderer, PerspectiveCamera } from \"../src/index\"\nimport { FastDiffuseTangentNormalSpecular } from \"../src/utils/shaders\"\nimport { Loader } from \"../src/utils/Loader\"\nimport { neg, normalize } from \"../src/utils/vecOps\"\n\nimport model from \"./obj/african_head.obj\"\nimport diffuse from \"./obj/african_head_diffuse.tga\"\nimport specular from \"./obj/african_head_spec.tga\"\nimport tangentNM from \"./obj/african_head_nm_tangent.tga\"\n\nlet loader = new Loader()\nloader.addModel(\"model\", model)\nloader.addTexture(\"diffuse\", diffuse)\nloader.addTexture(\"specular\", specular)\nloader.addTexture(\"normal\", tangentNM)\n\nlet renderer = new TinyRenderer({ target: document.getElementById(\"app\") })\nrenderer.setSize(800, 800)\n\nlet camera = new PerspectiveCamera({\n  position: [1, 1, 3],\n  viewport: [800, 800],\n})\nlet light = {\n  dir: neg(normalize([-4, -2, -3])),\n}\n\nlet scene = {\n  light,\n}\n\nloader.all().then(({ model, ...textures }) => {\n  let uniform = {\n    model,\n    ...textures,\n  }\n  model.shader = new FastDiffuseTangentNormalSpecular(uniform)\n  scene.model = model\n  animate()\n})\n\n// rotate camera & lightDir around y-axis (up)\nlet deg = -Math.PI / 36\nlet x = 0\nlet z = 3\n\nfunction animate() {\n  renderer.render(scene, camera)\n  ;[x, z] = [Math.cos(deg) * x - Math.sin(deg) * z, Math.sin(deg) * x + Math.cos(deg) * z]\n  light.dir = [\n    Math.cos(deg) * light.dir[0] - Math.sin(deg) * light.dir[2],\n    light.dir[1],\n    Math.sin(deg) * light.dir[0] + Math.cos(deg) * light.dir[2],\n  ]\n  camera.update({ position: [x, 0, z] })\n  requestAnimationFrame(animate)\n}\n"]}